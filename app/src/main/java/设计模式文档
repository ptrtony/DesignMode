1 单一职责原则
包名：singleResponsibility
单一职责原则注意事项和细节
1)、降低类的复杂度，一个类只负责一项职责
2)、提高类的可读性，可维护性
3)、降低变更引起的风险
4)、通常情况下，我们应当遵守单一职责原则，只有逻辑足够简单，才可以在代码级违反单一职责原则：
只有类中方法数量足够少，可以在方法级别保持单一职责原则

2 接口隔离原则
包名interface_segregation_principle
基本介绍
1)、客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖
应该建立在最小的接口上
2)、类A通过接口Interface1依赖类B，类C通过接口Interface1依赖类D，如果接口
Interface1对于类A和类C来说不是最小接口，那么类B和类D必须去实现他们不需要的方法
3)、按隔离原则应当这样处理：
将接口interface拆分为独立的几个接口，类A和类C分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则。
1)、类A通过接口Interface1依赖类B，类C通过接口Interface1依赖类D，如果接口Interface1对于类A和类C来说
不是最小接口，那么类B和类D必须去实现他们不需要的方法
2)、将接口Interface1拆分为独立的几个接口，类A和类C分别与他们需要的接口建立依赖关系，也就是采用接口隔离原则
3)、接口Interface1中出现的方法，根据实际情况拆分为三个接口
4)、代码实现

3 依赖倒置原则
包名：dependence_inversion_principle
1)、高层模块不应该依赖底层模块，二者都应该依赖其抽象
2)、抽象不应该依赖细节，细节应该依赖与抽象
3)、依赖倒转(倒置)的中心思想是面向接口编程
4)、依赖倒转原则是基于这样的设计理念，相当于细节的多变性，抽象的东西要稳定的多
以抽象为基础搭建的架构比以细节为基础的架构要稳定的多，在java中，抽象指的是接口或抽象类，细节
就是具体的实现类
5)、使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成
实现方式：
1)、接口传递（应用案例代码）
2)、构造方法传递（应用案例代码）
3)、setter方式传递

4里氏替换原则
包名：liskov
00中的继承性的思考和说明
1)、继承包含这样一层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然它不强制
要求所有的子类必须遵循这个契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承造成破坏。
2)、继承再给程序设计带来便利的同时，也带来弊端，比如使用继承会给程序带来侵入性，程序的可移植降低，
增加对对象间的耦合性，如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且
父类修改后，所有涉及到子类的功能都有可能产生故障
3)、问题提出：在编程中，如何正确的使用继承?=>里氏替换原则
里氏替换原则是：
1）、如果对每个类型为T1的对象o1，都有类型为T2的对象O2，使得以T1定义的所有程序P在所有的对象O1
都代换成O2时，程序P的行为没有发生改变，那么类型T2是类型T1的子类型，。换句话说，所有引用基类的地方
必须能透明的使用其子类的对象
2)、在使用继承时，遵循里氏替换原则，在子类中尽量不要重写父类方法
3)、里氏替换原则告诉我们，继承实际上让两个类耦合性增强，在合适的情况下，可以通过聚合，组合，依赖来解决问题

5开闭原则
包名：open_close
1)、开闭原则（Open Closed Principle）是编程中最基础、最重要的设计原则
2)、一个软件实体如类，模块和函数应该对扩展开放（对提供方），对修改关闭（对使用方）。用抽象构建框架，用实现扩展细节
3)、当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化
4)、编程中遵循其他原则，以及使用设计模式的目的就是遵循开闭原则。
思路：把创建Shape类做成抽象类，并提供一个抽象的draw方法，让子类去实现即可，这样我们有新的图形
种类时，只需要让新的图形类继承Shape。并实现draw方法即可。

6迪米特法则
包名：demeter
1)、一个对象应该对其他对象保持最小的了解
2)、类与类关系越密切，耦合度越大
3)、迪米特法则(Demeter principle)又叫最少知道原则，即一个类对自己依赖的类知道的越少越好，也就是说
对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供一个public方法，不对外泄漏任何信息
4)、迪米特法则还是个更简单的定义，只与直接的朋友通讯
5)、直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间时朋友关系，耦合
的方式更多，依赖、关联、组合、聚合等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接朋友，而出现
在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。

7合成复用原则
原则是尽量使用合并/聚合的方式，而不是使用继承
设计原则核心思想
1)、找出应用中可能需要变化之处，把它们独立起来，不要和哪些不需要变化的代码混在一起
2)、针对接口编程，而不是针对实现编程
3)、为了交互对象之间的松耦合设计而努力

8单利模式
所谓类的单利模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，
并且该类只提供一个取得其对象实例的方法
比如Hibernate的sessionFactory，它充当数据存储源的代理，并负责创建Session对象，SessionFactory
并不是轻量级的，一般情况下，一个项目通常只需要以恶搞SessionFactory就够，就是就会使用到单例模式
单例模式的八种写法
1)、饿汉式（静态常量）
2)、饿汉式（静态代码块）
3)、懒汉式（线程不安全）
4)、懒汉式（线程安全、同步方法）
5)、懒汉式（线程安全、同步代码块）
6)、双重校验
7)、静态内部类
8)、枚举
饿汉式（静态常量）应用实例
步骤如下：
1)、构造器私有化（防止new）
2)、类的内部创建对象
3)、向外暴露一个静态的公共方法。getInstance
4)、代码实现
优缺点说明：
饿汉式（静态常量）、饿汉式（静态代码块）
Singleton01、Singleton02
1）优点：这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程同步问题
2) 缺点：在类装载的时候就完成实例化，没有达到Lazy loading的效果。如果从始至终从未
使用过这个实例，则会造成内存的浪费
3)这种方式基于classloader机制避免了多线程的同步问题。不过，instance在类装载时就
实例化了，在单例模式大多数就是调用getInstance()方法，但是导致类装载的原因有很多种
因此不能确定有其他的方式（或则其他的静态方法）导致类的装载，这时候初始化instance
就没有达到lazy loading的效果
4）结论：这种单例模式可用，可能造成内存浪费
懒汉式（线程不安全）
Singleton03
优缺点
1）、起到了Lazy loading的效果，但是只是在单线程中使用
2）、如果在多线程下，一个线程进入到if(singleton == null) 代码块中
还未来得及往下执行，另一个线程也通过了这个判断条件。这时便会产生多个实例。
所以在多线程环境下不可使用这种方式
3）、结论：在实际的开发中，不要使用这种方式。
懒汉式（线程安全）
Singleton04
优缺点
1）、解决了线程不安全问题
2）、效率太低了，每个线程在想获得类的实例的时候，执行getInstance（）方法都要进行
同步。而其实这个方法只执行了一次实例化代码就够了，后面的想获得该类实例，直接return就行了。
方法进行同步效率太低
3）、结论：在实际的开发中，不推荐使用这种方式。
Singleton05
优缺点
1）、这种方式，本意是想对第四种实现方式的改进，因为前面同步方法效率太低，
改为同步产生实例化的代码块
2）、但是这种同步并不能起到线程同步的作用。跟第三种实现方法遇到的情形一致，假如
一个线程进入了if（singleton == null）判断代码块中，还未来得及往下执行，
另一个线程也通过了这个判断语句，这种会产生多个实例。
3）、结论：在实际开发中，不能使用这种方式。
Singleton06
双重检查

Singleton07
优缺点
1）、这种方式采用了类装载机制来保证初始化实例时只有一个线程
2）、静态内部类方法在Singleton类被装载时并不会立即被实例化，而是在需要实例化时，调用
getInstance方法，不会装载SingletonInstance类，而是完成Singleton的实例化
3）、类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程安全
性，在类进行初始化时，别的线程是无法进入的
4）、优点：避免了线程不安全，利用静态内部类特点实现延迟加载，效率高

9工厂模式
简单工厂模式
1）、简单工厂模式是属于创建型模式，是工厂模式的一种。简单工厂模式是由一个工厂对象决定
创建出哪一种产品类的实例。简单工厂模式是工厂模式家族中最简单实用的模式
2）、简单工厂模式：定义了一个创建对象的类，由这个类来封装实例化对象的行为（代码）
3）、在软件开发中，当我们会用到大量的创建某种、某类或则某批对象时，就会使用到工厂模式
工厂方法模式
使用简单工厂模式，创建不同的简单工厂模式，比如BJPizzaSimpleFactory、
LDPizzaSimpleFactory等等，从当前这个案例来说，也是可以的，但是考虑到项目的规模
以及软件的可维护性，可扩展性并不是特别好
思路
使用工厂方法模式
包名：factory/method
工厂方式模式介绍
工厂方法模式设计方案：将披萨项目的实例化功能抽象成抽象方法，在不同的口味点餐子类中具体实现
工厂方法模式：定义一个创建的抽象方法，由子类决定要实例化的类。工厂方法模式将抽象的实例化推迟给子类。
抽象工厂模式
包名：factory/abs
抽象工厂模式：
1）、定义了一个interface用于创建相关或有依赖关系的对象簇，而无需指明具体的类
2）、抽象工厂模式可以将简单的工厂模式和工厂方法整合
3）、从设计层面看，抽象工厂模式就是对简单的工厂模式的改进（或者称为进一步的抽象）
4）、将工厂抽象成两层，AbsFactory（抽象工厂）和具体实现的工厂子类。程序员可以根据创建对象类型使用
对应的工厂子类。这样将单个的简单工厂类变成了工厂簇；便利于代码的维护和扩展

10原型模式
包名：proto_type
传统的方式的优缺点
1）、优点是比较好理解，简单易操作
2）、在创建新的对象时，总是需要获取原始对象的属性，如果创建的对象比较复杂时，效率很低
3）、总是需要重新初始化对象，而不是动态得获取对象运行时的状态，不够灵活
4）、改进的思路
思路：Java中的Object类是所有类的根类，Object类提供了一个clone的方法，该方法可以将一个Java
对象复制一份，但是需要实现clone的Java类实现一个接口Cloneable，该接口表示该类能否复制且具有
复制的能力=>原型模式。
原型模式概念
1）、原型模式（ProtoType模式）是指：用原型实例指定创建对象的种类，并且通过拷贝这种原型，创建新的对象
2）、原型模式是一种创建型设计模式，允许一个对象再创建另外一个可定制的对象，无需知道如何创建的细节
3）、工作原理是：通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象
拷贝他们自己来实施创建，即对象clone
Client -> ProtoType ->ConCreteProtoType1 -> ConCreteProtoType2
原理结构图说明：
1、ProtoType原型类，声明一个克隆自己的接口
2、ConcreteProtoType：具体的原型类，实现一个克隆自己的操作
3、Client：一个原型对象克隆自己，从而创建一个新的对象（属性一样）
浅拷贝
1）、对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性
值复制一个给新的对象
2）、对于数据类型是引用数据类型的成员变量，比如说成员变量是某个数组，某个类的对象等
那么浅拷贝会进行引用传递，也就是只是将该成员变量的引用值（内存地址）复制一份给新的对象。因为实际上两个对象
的该成员变量都指向同一个实例。在这种情况下，在一个对象中修改该成员变量对影响到另一个对象的该成员变量值
3）、前面我们克隆羊就是浅拷贝
4）、浅拷贝是使用默认的clone()方法来实现的
sheep = (sheep)super.clone();
原型模式的注意事项
1）、创建新的对象比较复杂时，可以利用原型模式简化对象的创建过程，同时也能够提高效率
2）、不用重新初始化对象，而是动态地获得对象运行时的状态
3）、如果原始对象发生变化（增加或者减少属性），其它克隆对象也会发生相应的编码，无需修改代码
4）、在实现深拷贝的时候可能需要比较复杂的代码
5）、缺点：需要为每一个类配置一个克隆方法，这对全新的类来说不是很难，但对已有的类进行改造时，
需要修改其源代码，违背了ocp原则

11 建造者模式
需求：
1）需求建房子：这一个过程为打地基，砌墙、封顶
2）房子有各种各样的，比如普通房，高楼，别墅，各种各样的过程虽然一样，但是要求不是相同的
3）请编写程序，完成需求
优缺点
1）、优点是比较好理解，简单易操作
2）、设计的程序结构，过于简单，没有设计缓存层对象，程序的扩展维护不好，也就是说
这种设计方案，把产品（即房子）和创建产品的过程（即：建房子流程）封装在一起，耦合性增强了
3）、解决方案：将产品和产品建造过程解偶=>建造者模式
基本介绍
1）、建造者模式又叫生成器模式，是一种对象构建模式。它可以将复杂对象的建造过程抽象出来（抽象类别）
使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象
2）、构造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建他们
用户不需要知道内部具体的构造细节
构造者模式的四个角色
1）product（产品角色）：一个具体的产品对象
2）Builder（抽象建造者）：创建一个Product对象的各个部件指定的接口
3）ConcreteBuilder(具体建造者)：实现接口，构建和装配各个部件
4）Director（指挥者）：构建一个使用Builder的接口的对象。它主要是用于创建一个复杂的对象
它主要有两个作用，一是：隔离了客户与对象的生产过程，二是：负责控制产品对象的生产过程。
建造者注意事项和细节
1）、客户端（使用程序）不必知道产品内部组成部分，将产品本身与产品的创建过程结偶，使得相同的创建过程
可以创建不同的产品对象
2）、每一个具体创建者都相对独立，而与其他具体建造者无关，因此可以很方便的替换具体建造者或增加新的具体
建造者，用户使用不同的具体建造者即可得到不同的产品对象
3）、可以更加精细地控制产品的创建过程。将复杂产品的创建步骤分解为不同的方法中，
使得创建过程更加清晰，也更加方便使用程序来控制创建过程
4）、增加新的具体创建者无须修改原来类库的代码，指挥者类针对抽象建造者类编码，
系统扩散方便，符合“开闭原则”
5）、建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，
则不适合使用建造者模式因此其使用范围受到一定的限制
6）、如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得
很庞大，因此在这种情况下，要考虑是否选择建造者模式
7）、抽象工厂VS建造者模式
抽象工厂模式实现对产品家族的创建，一个产品家族是这样的一系列产品：具体不同分类维度的产品组合
采用抽象工厂模式不需要关系构建过程，只关心什么产品由什么工厂即可。而建造者模式则是要求按照指定的
蓝图建造产品，它的主要目的是通过组装零配件而产生一个新的产品。

12 适配器模式
包名：adapter
1）、适配器模式将某个类的接口转换成客户端期望的另外一个接口表示，主的目的是兼容性，让原来
因接口不匹配不能一起工作的两个类可以协同工作，其别名为包装器
2）、适配器模式属于结构性模式
3）、主要分为三类：类适配器模式、对象适配器模式、接口适配器模式
工作原理
1）、适配器模式：将一个类的接口转换成另外一个接口，让原来接口不兼容的类可以兼容
2）、从用户的角度看不到被适配器，是解偶的
3）、用户调用适配器转化出来的目标接口方法，适配器再调用被适配器的相关接口
4）、用户收到反馈结果，感觉只是和u表接口交互
类适配器
类适配器模式介绍
基本介绍：Adapter类，通过继承src类，实现dest接口，完成src->dest的适配
类适配器注意事项和细节
1）、Java是单继承机制，所有类适配器需要继承src类这一点算是缺点，因为要求dest必须是接口，有一定局限性
2）、src类的方法在Adapter中都会暴露出来，也增加了使用的成本
3）、由于其继承了src类，所以它可以根据需求重写src类的方法，使得Adapter的灵活性增强了
对象适配器
1）基本思路和类适配器模式相同，只是将Adapter类作为修改，不是继承src类，而是持有src类的实例
以解决兼容性问题。即：持有src类，实现dst类接口，完成src->dst的适配
2）根据“合成复用原则”，在系统中尽量使用关联关系来替换继承关系
3）对象适配器模式是适配器模式常用的一种
对象适配器模式的注意事项和细节
1）对象适配器和类适配器其实算是同一种思想，只不过实现方式不同
根据合成复用原则，使用组合替换继承，所以它解决了类适配器必须继承src的局限问题，也不再要求dst必须是接口
2）使用成本更低，更灵活。
接口适配器
1）适配器模式或缺省适配器模式
2）当不需要全部实现接口提供的方法时，可先设计一个抽象类实现接口，并为该接口中的每一个方法提供一个默认
实现（空实现），那么该抽象类的子类可有选择的覆盖父类的某些方法来实现需求
3）使用一个接口不想使用其所有的方法的情况
