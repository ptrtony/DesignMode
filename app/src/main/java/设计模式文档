1 单一职责原则
包名：singleResponsibility
单一职责原则注意事项和细节
1)、降低类的复杂度，一个类只复杂一项职责
2)、提高类的可读性，可维护性
3)、降低变更引起的风险
4)、通常情况下，我们应当遵守单一职责原则，只有逻辑足够简单，才可以在代码级违反单一职责原则：
只有类中方法数量足够少，可以在方法级别保持单一职责原则

2 接口隔离原则
包名interface_segregation_principle
基本介绍
1)、客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖
应该建立在最小的接口上
2)、类A通过接口Interface1依赖类B，类C通过接口Interface1依赖类D，如果接口
Interface1对于类A和类C来说不是最小接口，那么类B和类D必须去实现他们不需要的方法
3)、按隔离原则应当这样处理：
将接口interface拆分为独立的几个接口，类A和类C分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则。
1)、类A通过接口Interface1依赖类B，类C通过接口Interface1依赖类D，如果接口Interface1对于类A和类C来说
不是最小接口，那么类B和类D必须去实现他们不需要的方法
2)、将接口Interface1拆分为独立的几个接口，类A和类C分别与他们需要的接口建立依赖关系，也就是采用接口隔离原则
3)、接口Interface1中出现的方法，根据实际情况拆分为三个接口
4)、代码实现

3 依赖倒置原则
包名：dependence_inversion_principle
1)、高层模块不应该依赖底层模块，二者都应该依赖其抽象
2)、抽象不应该依赖细节，细节应该依赖与抽象
3)、依赖倒转(倒置)的中心思想是面向接口编程
4)、依赖倒转原则是基于这样的设计理念，相当于细节的多变性，抽象的东西要稳定的多
以抽象为基础搭建的架构比以细节为基础的架构要稳定的多，在java中，抽象指的是接口或抽象类，细节
就是具体的实现类
5)、使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成
实现方式：
1)、接口传递（应用案例代码）
2)、构造方法传递（应用案例代码）
3)、setter方式传递

4里氏替换原则
包名：liskov
00中的继承性的思考和说明
1)、继承包含这样一层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然它不强制
要求所有的子类必须遵循这个契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承造成破坏。
2)、继承再给程序设计带来便利的同时，也带来弊端，比如使用继承会给程序带来侵入性，程序的可移植降低，
增加对对象间的耦合性，如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且
父类修改后，所有涉及到子类的功能都有可能产生故障
3)、问题提出：在编程中，如何正确的使用继承?=>里氏替换原则
里氏替换原则是：
1）、如果对每个类型为T1的对象o1，都有类型为T2的对象O2，使得以T1定义的所有程序P在所有的对象O1
都代换成O2时，程序P的行为没有发生改变，那么类型T2是类型T1的子类型，。换句话说，所有引用基类的地方
必须能透明的使用其子类的对象
2)、在使用继承时，遵循里氏替换原则，在子类中尽量不要重写父类方法
3)、里氏替换原则告诉我们，继承实际上让两个类耦合性增强，在合适的情况下，可以通过聚合，组合，依赖来解决问题

5开闭原则
包名：open_close
1)、开闭原则（Open Closed Principle）是编程中最基础、最重要的设计原则
2)、一个软件实体如类，模块和函数应该对扩展开放（对提供方），对修改关闭（对使用方）。用抽象构建框架，用实现扩展细节
3)、当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化
4)、编程中遵循其他原则，以及使用设计模式的目的就是遵循开闭原则。
思路：把创建Shape类做成抽象类，并提供一个抽象的draw方法，让子类去实现即可，这样我们有新的图形
种类时，只需要让新的图形类继承Shape。并实现draw方法即可。

6迪米特法则
包名：demeter
1)、一个对象应该对其他对象保持最小的了解
2)、类与类关系越密切，耦合度越大
3)、迪米特法则(Demeter principle)又叫最少知道原则，即一个类对自己依赖的类知道的越少越好，也就是说
对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供一个public方法，不对外泄漏任何信息
4)、迪米特法则还是个更简单的定义，只与直接的朋友通讯
5)、直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间时朋友关系，耦合
的方式更多，依赖、关联、组合、聚合等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接朋友，而出现
在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。

